name: Issue Management

on:
  issues:
    types: [opened, labeled, unlabeled]
  issue_comment:
    types: [created]

jobs:
  auto_assign:
    runs-on: ubuntu-latest
    steps:
      - name: Auto-assign issue
        if: github.event.action == 'opened'
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            try {
              await github.rest.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.name,
                issue_number: context.issue.number,
                assignees: ['ijashuzain']
              });
            } catch (error) {
              console.error('Error assigning issue:', error.message);
            }

  manage_waiting_for_response:
    runs-on: ubuntu-latest
    steps:
      - name: Check for response and manage label
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            try {
              const { owner, repo } = context.repo;
              const issue_number = context.issue.number;

              const issue = await github.rest.issues.get({
                owner,
                repo,
                issue_number
              });
              
              const waitingLabel = issue.data.labels.find(l => l.name === 'waiting for response');
              
              if (waitingLabel) {
                const labeledAt = new Date(waitingLabel.created_at);
                const now = new Date();
                const hoursSinceLabeled = (now - labeledAt) / (1000 * 60 * 60);
                
                if (hoursSinceLabeled >= 24) {
                  const comments = await github.rest.issues.listComments({
                    owner,
                    repo,
                    issue_number
                  });
                  
                  const hasNewComments = comments.data.some(comment => new Date(comment.created_at) > labeledAt);
                  
                  if (!hasNewComments) {
                    await github.rest.issues.update({
                      owner,
                      repo,
                      issue_number,
                      state: 'closed'
                    });
                  } else {
                    await github.rest.issues.removeLabel({
                      owner,
                      repo,
                      issue_number,
                      name: 'waiting for response'
                    });
                    
                    await github.rest.issues.addLabels({
                      owner,
                      repo,
                      issue_number,
                      labels: ['triage']
                    });
                  }
                }
              }
              
              // Check if the event is an 'unlabeled' event and the label is 'waiting for response'
              if (github.event && github.event.action === 'unlabeled' && github.event.label && github.event.label.name === 'waiting for response') {
                await github.rest.issues.addLabels({
                  owner,
                  repo,
                  issue_number,
                  labels: ['triage']
                });
              }
            } catch (error) {
              console.error('Error managing issue:', error.message);
            }
